#sum(rate(container_cpu_usage_seconds_total[1m])) by (pod) *1000    -to calculate cpu usage in mcores (this provides how much cpu second it consumed in last 1m)
#sum(container_memory_working_set_bytes{container!=""}) by(pod)/1048576   for memeory utilisation in Mi
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  labels:
    app: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      serviceAccountName: prom-sa
      containers:
        - name: prometheus
          image: prom/prometheus
          ports:
            - containerPort: 9090
          volumeMounts:
            - name: prom-config
              mountPath: /etc/prometheus
            - name: prometheus-data
              mountPath: /prometheus
      volumes:
        - name: prom-config
          configMap:
              name: prometheusconfig
        - name: prometheus-data
          persistentVolumeClaim:
              claimName: prometheous-pvc
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prom-sa

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: metrics-server-access
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: metrics-server-access-binding
subjects:
- kind: ServiceAccount
  name: prom-sa
  namespace: default
roleRef:
  kind: ClusterRole
  name: metrics-server-access
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
spec:
  type: NodePort
  selector:
    app: prometheus
  ports:
    - port: 9090
      targetPort: 9090
      nodePort: 30090

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheous-pvc
spec:
  storageClassName: ""
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
          storage: 1Gi

---

apiVersion: v1
kind: PersistentVolume
metadata:
    name: prometheous-pv
spec:
    capacity:
        storage: 1Gi
    accessModes:
        - ReadWriteOnce
    storageClassName: ""
    volumeMode: Filesystem
    hostPath:
          path: /tmp/monitoring
---

apiVersion: v1
kind: ConfigMap
metadata:
     name: prometheusconfig
data:
  prometheus.yml: |-
    global:
      scrape_interval: 5s
      evaluation_interval: 5s
    rule_files:
    #   - /etc/prometheus/prometheus.rules
    # alerting:
    #   alertmanagers:
    #   - scheme: http
    #     static_configs:
    #     - targets:
    #       - "alertmanager.monitoring.svc:9093"
    scrape_configs:
      - job_name: 'node-exporter'
        kubernetes_sd_configs:
          - role: endpoints
        relabel_configs:
        - source_labels: [__meta_kubernetes_endpoints_name]
          regex: 'node-exporter'
          action: keep
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
        - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
        - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
          action: keep
          regex: default;kubernetes;https
      - job_name: 'kubernetes-nodes'
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        kubernetes_sd_configs:
        - role: node
        relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
        - target_label: __address__
          replacement: kubernetes.default.svc:443
        - source_labels: [__meta_kubernetes_node_name]
          regex: (.+)
          target_label: __metrics_path__
          replacement: /api/v1/nodes/${1}/proxy/metrics
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
        - role: pod
        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          target_label: __address__
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_pod_name]
          action: replace
          target_label: kubernetes_pod_name
      - job_name: 'kube-state-metrics'
        static_configs:
          - targets: ['kube-state-metrics.kube-system.svc.cluster.local:8080']
      - job_name: 'kubernetes-cadvisor'
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        kubernetes_sd_configs:
        - role: node
        relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
        - target_label: __address__
          replacement: kubernetes.default.svc:443
        - source_labels: [__meta_kubernetes_node_name]
          regex: (.+)
          target_label: __metrics_path__
          replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor
      - job_name: 'kubernetes-service-endpoints'
        kubernetes_sd_configs:
        - role: endpoints
        relabel_configs:
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
          action: replace
          target_label: __scheme__
          regex: (https?)
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
          action: replace
          target_label: __address__
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
        - action: labelmap
          regex: __meta_kubernetes_service_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_service_name]
          action: replace
          target_label: kubernetes_name
# data:
#      prometheus.yml: |
#            # my global config
#            global:
#                 scrape_interval: 15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
#                 evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.
#            alerting:
#                 alertmanagers:
#                         - static_configs:
#                                 - targets:
#                                         # - alertmanager:9094
#            rule_files:
#                 # - "first_rules.yml"
#                 # - "second_rules.yml"
#            scrape_configs:
#                 - job_name: "prometheus"
#                   static_configs:
#                         - targets: ["localhost:9090"]
#                 # - job_name: "node-exporter"
#                 #   static_configs:
#                 #         - targets: ["node-exporter-service:9100"]
#                 - job_name: "kube-state-metrics"
#                   static_configs:
#                         - targets: ["kube-state-metrics.kube-system.svc.cluster.local:8080"]
#                 - job_name: "metric-server"
#                   scheme: https
#                   tls_config:
#                         ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
#                   bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
#                   static_configs:
#                         - targets: ["metrics-server.kube-system.svc.cluster.local:443"]

