In SA manifets one param is there : automountServiceAccountToken default value is true

By default, the automountServiceAccountToken is set to true for service accounts in Kubernetes. 
This means that if you do not explicitly set this field to false, 
the service account token will be automatically mounted into the pods that use the service account.

1] Create SA 
#kubectl create sa <sa_name>
or manifets as below
 
apiVersion: v1
kind: ServiceAccount
metadata:
        name: demo-sa

2] We need to do authentification of our service account using token
--A] by commnd:- # kubectl create token <sa_name>
--B] we can create secret for token as below
apiVersion: v1
kind: Secret
metadata:
        name: demo-sa-token
        annotations:
                kubernetes.io/service-account.name: demo-sa
type: kubernetes.io/service-account-token

this above manifest will generate token for mentioned SA in annotations. and type of secret will be as above  mentioned.

3] role and rolebinding need to create 

role manifest will be:
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
        name: get_pods
        namespace: default
rules:
        - apiGroups: [""]
          resources: ["pods", "services", "serviceaccounts"]
          verbs: ["get", "watch", "list"]

RoleBinding :

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
        name: get_pods
        namespace: default
subjects:
        - name: demo-sa
          kind: ServiceAccount
          apiGroup: ""
roleRef:
        name: get_pods
        kind: Role
        apiGroup: rbac.authorization.k8s.io

4] Now we can attach this SA to any pod so that that pod will be have acces to perform get watch list operation on  pods", "services", "serviceaccounts".

This is the reason we assign SA to POD or anyother k8s resource if we want k8s autherisation, authentication it get by default SA also. 
cause default SA will be Assign to all pods for respective namespace.


NOTE:- Default assign SA does not have permissions to execte command to k8s Cluster. it has very minimal permissons.

To validate:
We can use 
kubectl auth can-i get pod --as=system:serviceaccount:<ns_name>:<sa_name>    :- this will say yes or no that this SA can perform that action or not

eg:- $kubectl auth can-i get pod --as=system:serviceaccount:default:demo-sa
o/p:- yes

so this SA acces will be pass to pod or resource to which this SA is assigned.