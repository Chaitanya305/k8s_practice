1] Create private key

openssl genrsa -out sagar.key 2048
openssl req -new -key sagar.key -out sagar.csr -subj "/CN=sagar"

2] Generate request for your user 

cat sagar.csr | base64 | tr -d "\n"

3]Create a CertificateSigningRequest, replace our request here.

apiVersion: certificates.k8s.io/v1
kind: CertificateSigningRequest
metadata:
  name: sagar
spec:
  request: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURSBSRVFVRVNULS0tLS0KTUlJQ1ZqQ0NBVDRDQVFBd0VURVBNQTBHQTFVRUF3d0dZVzVuWld4aE1JSUJJakFOQmdrcWhraUc5dzBCQVFFRgpBQU9DQVE4QU1JSUJDZ0tDQVFFQTByczhJTHRHdTYxakx2dHhWTTJSVlRWMDNHWlJTWWw0dWluVWo4RElaWjBOCnR2MUZtRVFSd3VoaUZsOFEzcWl0Qm0wMUFSMkNJVXBGd2ZzSjZ4MXF3ckJzVkhZbGlBNVhwRVpZM3ExcGswSDQKM3Z3aGJlK1o2MVNrVHF5SVBYUUwrTWM5T1Nsbm0xb0R2N0NtSkZNMUlMRVI3QTVGZnZKOEdFRjJ6dHBoaUlFMwpub1dtdHNZb3JuT2wzc2lHQ2ZGZzR4Zmd4eW8ybmlneFNVekl1bXNnVm9PM2ttT0x1RVF6cXpkakJ3TFJXbWlECklmMXBMWnoyalVnald4UkhCM1gyWnVVV1d1T09PZnpXM01LaE8ybHEvZi9DdS8wYk83c0x0MCt3U2ZMSU91TFcKcW90blZtRmxMMytqTy82WDNDKzBERHk5aUtwbXJjVDBnWGZLemE1dHJRSURBUUFCb0FBd0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBR05WdmVIOGR4ZzNvK21VeVRkbmFjVmQ1N24zSkExdnZEU1JWREkyQTZ1eXN3ZFp1L1BVCkkwZXpZWFV0RVNnSk1IRmQycVVNMjNuNVJsSXJ3R0xuUXFISUh5VStWWHhsdnZsRnpNOVpEWllSTmU3QlJvYXgKQVlEdUI5STZXT3FYbkFvczFqRmxNUG5NbFpqdU5kSGxpT1BjTU1oNndLaTZzZFhpVStHYTJ2RUVLY01jSVUyRgpvU2djUWdMYTk0aEpacGk3ZnNMdm1OQUxoT045UHdNMGM1dVJVejV4T0dGMUtCbWRSeEgvbUNOS2JKYjFRQm1HCkkwYitEUEdaTktXTU0xMzhIQXdoV0tkNjVoVHdYOWl4V3ZHMkh4TG1WQzg0L1BHT0tWQW9FNkpsYWFHdTlQVmkKdjlOSjVaZlZrcXdCd0hKbzZXdk9xVlA3SVFjZmg3d0drWm89Ci0tLS0tRU5EIENFUlRJRklDQVRFIFJFUVVFU1QtLS0tLQo=
  signerName: kubernetes.io/kube-apiserver-client
  expirationSeconds: 108000  # 30 day
  usages:
  - client auth

then create this CSR
#kubectl apply -f sagar-csr.yml
once it is created it will go into Pending state

4] Need to approve the CSR request

#kubectl certificate approve sagar

Now state will be approved,Issued

5]Get the certificate

kubectl get csr sagar -o jsonpath='{.status.certificate}'| base64 -d >sagar.crt


#kubectl config get-contexts ---> to get the current context

6]Add to kubeconfig

The last step is to add this user into the kubeconfig file. 

#kubectl config set-credentials sagar --client-key=sagar.key --client-certificate=sagar.crt --embed-certs=true

Then, you need to add the context:

#kubectl config set-context sagar --cluster=kubernetes --user=sagar

To test it, change the context to sagar

#kubectl config use-context sagar

To get the current context

#kubectl config get-contexts


###########---------------------------------------#####################--------------------------------#######################----------------------####################
TO acces remote server kubernetes Cluster.

kubectl config set-cluster kubernetes --server=https://192.168.210.145:6443 --certificate-authority=/c/Users/Shree/ca.crt

kubectl config set-credentials sagar --client-certificate=/c/Users/Shree/sagar.crt --client-key=/c/Users/Shree/sagar.key --embed-certs=true

kubectl config set-context sagar --cluster=kubernetes --user=sagar

kubectl config use-context sagar 


-------------------

*NOTE: - 
When you create a user in Kubernetes using a certificate signing request (CSR) and then approve and use that certificate, 
the user by default does not have any permissions. Kubernetes employs Role-Based Access Control (RBAC) to manage permissions, 
and new users must be explicitly granted permissions through RoleBindings or ClusterRoleBindings.